name: Build Android APK (Expo Prebuild)

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      CI: 1
      EXPO_NO_TELEMETRY: 1
      EXPO_NO_PROMPT: 1
      # Safe dummy so builds don't crash if your app reads it at build time:
      EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID: dummy.apps.googleusercontent.com

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (sanity check)
        run: |
          pwd
          ls -la
          echo "---- package.json ----"
          [ -f package.json ] && cat package.json || echo "NO package.json at repo root"
          echo "---- app.json (if present) ----"
          [ -f app.json ] && cat app.json || echo "NO app.json at repo root"

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install expo-cli (optional)
        run: npm i -g expo-cli

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm i
          fi

      # Use a minimal, image-free app.json to avoid PNG/CRC issues during prebuild
      - name: Force minimal image-free app.json
        shell: bash
        run: |
          [ -f app.json ] && cp app.json app.json.bak || true
          cat > app.json << 'EOF'
          {
            "expo": {
              "name": "Data Wallet E2E",
              "slug": "data-wallet-e2e-google",
              "version": "0.2.0",
              "orientation": "portrait",
              "scheme": "datawallet",
              "updates": { "fallbackToCacheTimeout": 0 },
              "assetBundlePatterns": ["**/*"],
              "ios": { "supportsTablet": true },
              "android": {
                "package": "com.example.datawallete2e"
              },
              "web": { "bundler": "metro", "output": "static" }
            }
          }
          EOF
          echo "---- FINAL app.json ----"
          cat app.json

      - name: Validate app.json
        run: node -e "JSON.parse(require('fs').readFileSync('app.json','utf8')); console.log('app.json OK')"

      - name: Expo doctor (non-fatal)
        run: npx expo-doctor || true

      - name: Prebuild (Expo â†’ native)
        run: npx expo prebuild --platform android

      - name: Ensure gradlew executable
        run: chmod +x android/gradlew

      # Safe defaults for RN/AGP builds + more heap
      - name: Write gradle.properties (safe defaults)
        run: |
          cat > android/gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          kotlin.code.style=official
          EOF
          echo "---- android/gradle.properties ----"
          cat android/gradle.properties

      # Ensure SDK levels are sane for RN 0.74 / AGP 8.x
      - name: Patch compile/target/min SDK (if needed)
        run: |
          sed -i 's/compileSdkVersion *[0-9][0-9]*/compileSdkVersion 34/g' android/build.gradle || true
          sed -i 's/minSdkVersion *[0-9][0-9]*/minSdkVersion 23/g' android/app/build.gradle || true
          sed -i 's/targetSdkVersion *[0-9][0-9]*/targetSdkVersion 34/g' android/app/build.gradle || true
          echo "---- android/app/build.gradle (sdk lines) ----"
          grep -nE 'compileSdkVersion|minSdkVersion|targetSdkVersion|namespace|applicationId' android/app/build.gradle || true

      # Build and always capture logs so we can debug if it fails
      - name: Build debug APK (verbose, save logs)
        working-directory: android
        run: |
          ./gradlew clean
          ./gradlew assembleDebug --stacktrace --info --warning-mode all --no-daemon --scan | tee ../gradle-build.log
        continue-on-error: true

      # Show the failure summary inline in Actions UI
      - name: Extract error summary from Gradle log
        if: always()
        run: |
          echo "----- LAST 300 LINES -----"
          tail -n 300 gradle-build.log || true
          echo "----- FAILURE BLOCK -----"
          sed -n '/FAILURE:/,$p' gradle-build.log || true
          echo "----- COMMON ERROR PATTERNS -----"
          grep -nEi "(AAPT|error: |FAILURE:|What went wrong|Caused by:|Duplicate class|No matching variant|manifest)" gradle-build.log | tail -n 200 || true

      # Upload APK only if it exists and build succeeded
      - name: Upload APK (if present)
        if: success() && hashFiles('android/app/build/outputs/apk/debug/app-debug.apk') != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: android/app/build/outputs/apk/debug/app-debug.apk

      # Always upload logs/config for troubleshooting
      - name: Upload debug bundle (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-debug-info
          path: |
            gradle-build.log
            android/build.gradle
            android/app/build.gradle
            android/settings.gradle
            android/gradle.properties
            android/app/src/main/AndroidManifest.xml
            app.json
            package.json
